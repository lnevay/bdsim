#! /usr/bin/env python2.7
from matplotlib import colors
import collections

class Globals():
    ''' Class containing global parameters for testing.
        Includes:
        - Paths to the BDSIM and comparator executables.
        - Lists and dictionaries of testable variables:
            - Elements
            - All element parameters
            - Parameters for an individual element
        - Parameter values for:
            - Magnet Coefficients (K1 to K5)
            - Arrays of multipole component
            - All element parameters
            - Particles
            - Example accelerators with particle and energy
            - 6D beam phase space:
                - Full
                - Extremeties for robustness testing

        '''

    def __init__(self):
        # bdsim executable
        self._bdsimExecutable = "@CMAKE_BINARY_DIR@/bdsim"

        # comparator executable
        self._comparatorExecutable = "@CMAKE_BINARY_DIR@/comparator/comparator"

        # bdsim source (for results feedback only)
        self._bdsimSource = "@CMAKE_SOURCE_DIR@"

        # components that can be varied
        self.components = ['drift',
                           'rbend',
                           'sbend',
                           'vkick',
                           'hkick',
                           'quadrupole',
                           'sextupole',
                           'octopole',
                           'decapole',
                           'multipole',
                           'thinmultipole',
                           'rfcavity',
                           'rcol',
                           'ecol',
                           'degrader',
                           'muspoiler',
                           'shield',
                           'solenoid',
                           'laser']

        # parameters that can be varied (across all components)
        self.parameters = ['length',
                           'angle',
                           'kickangle',
                           'field',
                           'e1',
                           'e2',
                           'k1',
                           'k2',
                           'k3',
                           'k4',
                           'knl',
                           'ksl',
                           'gradient',
                           'x(col)',
                           'y(col)',
                           'numWedges',
                           'thickness',
                           'ks',
                           'fint',
                           'fintx',
                           'hgap']

        #parameters that can be varied for each components type.
        self.hasParams = {'drift'         : ['length'],
                          'rbend'         : ['length', 'angle', 'field', 'e1', 'e2', 'fint', 'fintx', 'hgap'],
                          'sbend'         : ['length', 'angle', 'field', 'e1', 'e2', 'fint', 'fintx', 'hgap'],
                          'vkick'         : ['length', 'kickangle'],
                          'hkick'         : ['length', 'kickangle'],
                          'quadrupole'    : ['length', 'k1'],
                          'sextupole'     : ['length', 'k2'],
                          'octopole'      : ['length', 'k3'],
                          'decapole'      : ['length', 'k4'],
                          'multipole'     : ['length', 'knl', 'ksl'],
                          'thinmultipole' : ['knl', 'ksl'],
                          'rfcavity'      : ['length', 'gradient'],
                          'rcol'          : ['length'],
                          'ecol'          : ['length'],
                          'degrader'      : ['length', 'numWedges', 'thickness'],
                          'muspoiler'     : ['length', 'field'],
                          'shield'        : ['length'],
                          'solenoid'      : ['length', 'ks'],
                          'laser'         : ['length']}

        #use same magnet strengths for multipole and thinMultipole components
        self.magStrengths = {'k1': 0.025,
                             'k2': 5.0,
                             'k3': 1.5e3,
                             'k4': 6.0e5,
                             'k5': 3.0e8}

        #tuples for multipole and thinMultipole (all K components for given element)
        self.k1l = [(-1.0 * self.magStrengths['k1']),             (0), (1.0 * self.magStrengths['k1'])]
        self.k2l = [(0, -1.0 * self.magStrengths['k1']),          (0), (0, 1.0 * self.magStrengths['k1'])]
        self.k3l = [(0, 0, -1.0 * self.magStrengths['k1']),       (0), (0, 0, 1.0 * self.magStrengths['k1'])]
        self.k4l = [(0, 0, 0, -1.0 * self.magStrengths['k1']),    (0), (0, 0, 0, 1.0 * self.magStrengths['k1'])]
        self.k5l = [(0, 0, 0, 0, -1.0 * self.magStrengths['k1']), (0), (0, 0, 0, 0, 1.0 * self.magStrengths['k1'])]

        #test values for the components parameters
        #field is not set, it will be calculated upon writing based on length, angle, and energy.
        #number of field values must equal the number of angle values.
        self.paramValues = {'length'    : [0.2, 2.0, 20.0],
                            'angle'     : [-0.3, -0.003, 0, 0.003, 0.3],
                            'kickangle' : [-0.003, 0, 0.003],
                            'field'     : [0, 0, 0, 0, 0],
                            'e1'        : [-0.3491, -0.003491, 0, 0.003491, 0.3491],
                            'e2'        : [-0.3491, -0.003491, 0, 0.003491, 0.3491],
                            'k1'        : [-1.0 * self.magStrengths['k1'], 0, self.magStrengths['k1']],
                            'k2'        : [-1.0 * self.magStrengths['k2'], 0, self.magStrengths['k2']],
                            'k3'        : [-1.0 * self.magStrengths['k3'], 0, self.magStrengths['k3']],
                            'k4'        : [-1.0 * self.magStrengths['k4'], 0, self.magStrengths['k4']],
                            'knl'       : [self.k1l, self.k2l, self.k3l, self.k4l, self.k5l],
                            'ksl'       : [self.k1l, self.k2l, self.k3l, self.k4l, self.k5l],
                            'gradient'  : [-20.0, -0.002, 0, 0.002, 20.0],
                            'x(col)'    : [0.05],
                            'y(col)'    : [0.05],
                            'numWedges' : [1, 5, 10],
                            'thickness' : [0.01, 0.1, 1.0], #fraction of element length
                            'ks'        : [-0.3, -0.003, 0, 0.003, 0.3],
                            'fint'      : [0, 1.0/6.0, 0.5],
                            'fintx'     : [0, 1.0/6.0, 0.5],
                            'hgap'      : [0.01, 0.1]}

        # test particles
        self.particles = ['e-', 'proton']

        # Accelerator information of example machines. Full test ranges will test all these machines at their
        # energies and for their given particles
        self.accelerators = {'ATF2'         : {'particle': 'e-', 'energy': 1.282},
                             'DLS'          : {'particle': 'e-', 'energy': 3.0},
                             'ILC'          : {'particle': 'e-', 'energy': 250},
                             'CLIC'         : {'particle': 'e-', 'energy': 1500},
                             'PSI Gantry 2' : {'particle': 'proton', 'energy': 1.188272},
                             'J-PARC'       : {'particle': 'proton', 'energy': 50},
                             'SPS'          : {'particle': 'proton', 'energy': 400},
                             'LHC'          : {'particle': 'proton', 'energy': 4000},
                             'FCC'          : {'particle': 'proton', 'energy': 50000}
                             }

        # Full phase space
        self.BeamPhaseSpace = {'X'  : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'PX' : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'Y'  : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'PY' : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'T'  : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'PT' : [0      ,  1.0e-6,  1.0e-4, 1.0e-2]}

        # Phase space extremeties for robustness testing
        self.BeamPhaseSpaceExtremeties = {'X'  : [-1.0e-2, 0, 1.0e-2],
                                          'PX' : [-1.0e-2, 0, 1.0e-2],
                                          'Y'  : [-1.0e-2, 0, 1.0e-2],
                                          'PY' : [-1.0e-2, 0, 1.0e-2],
                                          'T'  : [-1.0e-2, 0, 1.0e-2],
                                          'PT' : [0,1.0e-2]}

        # integrator (mainly for use with field maps)
        self.Integrators = {'g4cashkarprkf45'       : {'Field': 'EM', 'Dim': 4},
                            'g4classicalrk4'        : {'Field': 'EM', 'Dim': 4},
                            'g4constrk4'            : {'Field': 'B', 'Dim': 3},
                            'g4expliciteuler'       : {'Field': 'EM', 'Dim': 4},
                            'g4impliciteuler'       : {'Field': 'EM', 'Dim': 4},
                            'g4simpleheum'          : {'Field': 'EM', 'Dim': 4},
                            'g4simplerunge'         : {'Field': 'EM', 'Dim': 4},
                            'g4exacthelixstepper'   : {'Field': 'B', 'Dim': 3},
                            'g4helixexpliciteuler'  : {'Field': 'B', 'Dim': 3},
                            'g4helixheum'           : {'Field': 'B', 'Dim': 3},
                            'g4heliximpliciteuler'  : {'Field': 'B', 'Dim': 3},
                            'g4helixmixedstepper'   : {'Field': 'B', 'Dim': 3},
                            'g4helixsimplerunge'    : {'Field': 'B', 'Dim': 3},
                            'g4nystromrk4'          : {'Field': 'B', 'Dim': 3},
                            'g4rkg3stepper'         : {'Field': 'B', 'Dim': 3}
                            }

        self.FieldFormats = ['bdsim1d',
                             'bdsim2d',
                             'bdsim3d',
                             'bdsim4d',
                             'poisson2d',
                             'poisson2dquad',
                             'poisson2ddipole']

        self.FieldTypes = ['bmap1d' , 'bmap2d' , 'bmap3d' , 'bmap4d',
                           'emap1d' , 'emap2d' , 'emap3d' , 'emap4d',
                           'ebmap1d', 'ebmap2d', 'ebmap3d', 'ebmap4d']

        self.Interpolators = ['nearest1d', 'nearest2d', 'nearest3d', 'nearest4d',
                              'linear1d' , 'linear2d' , 'linear3d' , 'linear4d',
                              'cubic1d'  , 'cubic2d'  , 'cubic3d'  , 'cubic4d']

        self.returnCodes = collections.OrderedDict([('SUCCESS', 0),
                                                    ('FAILED', 1),
                                                    ('INCORRECT_ARGS', 2),
                                                    ('FILE_NOT_FOUND', 3),  # i.e BDSIM did not generate anything
                                                    ('OVERLAPS', 4),
                                                    ('STUCK_PARTICLE', 5),
                                                    ('TRACKING_WARNING', 6),  # not sure if needed...
                                                    ('TIMEOUT', 7),
                                                    ('NO_DATA', 8)
                                                    ])

        self.cmap = colors.ListedColormap(['b',
                                           (1, 1, 0),  # actual yellow
                                           'y',
                                           'r',
                                           'g',
                                           'm',
                                           'c',
                                           'k',
                                           'w'])

    def _CheckComponent(self, componentType=''):
        if not self.components.__contains__(componentType):
            raise ValueError("Unknown component type.")